@*//-----------------------------------------------------------------------
    // Copyright 2016 Sitecore Corporation A/S
    // Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
    // except in compliance with the License. You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software distributed under the
    // License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // either express or implied. See the License for the specific language governing permissions
    // and limitations under the License.
    // -------------------------------------------------------------------------------------------*@
@using Sitecore.Collections
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Commerce.Connect.CommerceServer
@model Sitecore.Feature.Commerce.Catalog.Models.ProductViewModel
@{
    if (Model == null)
    {
        return;
    }

    var isCategory = Model.IsCategory();
    var brand = Model.RenderField("Brand");
    var brandLength = brand.ToString().Length;
}

<div class="thumbnail">
    @if (Model.IsOnSale && Model.OnSaleOverlayImage != null)
    {
        // TODO: Move the following hard-coded style settings to .css.
        <div style="position: absolute; top: 25; left: 25;">
            <img src="@(Model.OnSaleOverlayImage.ImageUrl(50,50))" alt="On sale!"/>
        </div>
    }    

    @using (Html.BeginEditFrame(Model.Item.Paths.FullPath, CommerceConstants.KnownItemPaths.EditFrameImages))
    {
        if (Model.Images != null && Model.Images.Count > 0)
        {
            <a href="@Model.GetLink()">
                <img src="@(Model.Images[0]?.ImageUrl(300, 300))" class="img-responsive" alt="product image" title="@Model.DisplayName"/>
            </a>
        }
        else
        {
            <a href="@Model.GetLink()">
                @Html.Sitecore().Field("Image", Html.Sitecore().CurrentItem, new
                {
                    Parameters = new SafeDictionary<string>
                    {
                        {"class", "img-responsive"},
                        {"title", Model.DisplayName}
                    }
                })
            </a>
        }
    }
                         

    <div class="caption">
        <a href="@Model.GetLink()">
            <h3 class="twolines">@Model.DisplayName</h3>
        </a>
        @if (brand != null && brandLength > 0)
        {
            <p>@brand</p>
        }
        else
        {
            <p class="nobrand">&nbsp;</p>
        }
        @if (!isCategory)
        {
            var isVariant = Model.LowestPricedVariantAdjustedPrice.HasValue;
            var adjustedPriceWithCurrency = string.Empty;
            var listPriceWithCurrency = string.Empty;
            var savingsPercentage = 0.0M;
            var listPrice = 0.0M;
            var adjustedPrice = 0.0M;
            var displayStartingFrom = false;

            if (isVariant && Model.LowestPricedVariantListPrice.HasValue)
            {
                adjustedPrice = Model.LowestPricedVariantAdjustedPrice.Value;
                listPrice = Model.LowestPricedVariantListPrice.Value;
                displayStartingFrom = Model.HighestPricedVariantAdjustedPrice.HasValue && adjustedPrice < Model.HighestPricedVariantAdjustedPrice.Value;

                adjustedPriceWithCurrency = Model.LowestPricedVariantAdjustedPriceWithCurrency;

                if (Model.IsOnSale)
                {
                    listPriceWithCurrency = Model.LowestPricedVariantListPriceWithCurrency;
                    savingsPercentage = Model.VariantSavingsPercentage;
                }
                else
                {
                    listPriceWithCurrency = adjustedPriceWithCurrency;
                }
            }
            else
            {
                listPriceWithCurrency = Model.ListPriceWithCurrency;
                //listPrice = Model.ListPrice.HasValue ? Model.ListPrice.Value : 0.0M;

                if (Model.IsOnSale)
                {
                    adjustedPriceWithCurrency = Model.AdjustedPriceWithCurrency;
                    savingsPercentage = Model.SavingsPercentage;
                }
            }
            if (Model.IsOnSale)
            {
                <div class="text-info" pid="priceNow">
                    @if (displayStartingFrom)
                    {
                        <small>
                            <em>Starting from</em>
                        </small>
                    }
                    <strong>@Html.DisplayFor(model => adjustedPriceWithCurrency)</strong>
                </div>
                <div class="text-muted" pid="price">
                    <small>
                        <del>@Html.DisplayFor(model => listPriceWithCurrency)</del>
                    </small>
                </div>

                <div>
                    <small class="price-savings" pid="savings">@Html.Sitecore().Field("Save percent lead", Html.Sitecore().CurrentRendering.Item) @savingsPercentage%</small>
                </div>
            }
            else
            {
                <div class="text-info" pid="price">
                    @if (displayStartingFrom)
                    {
                        <small>
                            <em>Starting from</em>
                        </small>
                    }
                    <strong>@Html.DisplayFor(model => listPriceWithCurrency)</strong>
                </div>
                <div class="text-muted">
                    <small>&nbsp;</small>
                </div>
                <div class="text-muted">
                    <small>&nbsp;</small>
                </div>
            }

            if (Model.StockStatus != null)
            {
                <div pid="stockStatus" class="price-stock">@Html.DisplayFor(model => Model.StockStatusName)</div>
                if (Model.StockAvailabilityDate != null)
                {
                    <div pid="stockAvailabilityDate" class="price-stock"> / @Html.DisplayFor(model => Model.StockAvailabilityDate)</div>
                }
                else
                {
                    <div class="price-stock">&nbsp;</div>
                }
            }
            else
            {
                <div class="price-stock">&nbsp;</div>
                <div class="price-stock">&nbsp;</div>
            }
        }

        @if (!isCategory)
        {
            <div class="rating hidden-sm hidden-xs">
                <span @(Model.CustomerAverageRating >= 1 ? "class=text-primary" : "")><span class="glyphicon glyphicon-star"></span></span>
                <span @(Model.CustomerAverageRating >= 2 ? "class=text-primary" : "")><span class="glyphicon glyphicon-star"></span></span>
                <span @(Model.CustomerAverageRating >= 3 ? "class=text-primary" : "")><span class="glyphicon glyphicon-star"></span></span>
                <span @(Model.CustomerAverageRating >= 4 ? "class=text-primary" : "")><span class="glyphicon glyphicon-star"></span></span>
                <span @(Model.CustomerAverageRating >= 5 ? "class=text-primary" : "")><span class="glyphicon glyphicon-star"></span></span>
            </div>
        }
        <div class="p-t-1">
            @if (!isCategory)
            {
                <a href="@Model.GetLink()" class="btn btn-default">
                    <span class="glyphicon glyphicon-th-list"></span> @Model.ProductDetailsLinkText
                </a>
            }
            else
            {
                <a href="@Model.GetLink()" class="btn btn-default">
                    <span></span> @Html.Sitecore().Field("Category", Html.Sitecore().CurrentRendering.Item)
                </a>
            }
        </div>
    </div>
</div>