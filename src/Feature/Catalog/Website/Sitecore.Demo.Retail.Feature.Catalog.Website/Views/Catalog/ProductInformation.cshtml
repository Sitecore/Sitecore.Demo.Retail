@*//-----------------------------------------------------------------------
    // Copyright 2016 Sitecore Corporation A/S
    // Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
    // except in compliance with the License. You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software distributed under the
    // License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // either express or implied. See the License for the specific language governing permissions
    // and limitations under the License.
    // -------------------------------------------------------------------------------------------*@
@using Sitecore.Demo.Retail.Feature.Catalog.Website.Extensions
@using Sitecore.Demo.Retail.Foundation.Commerce.Website.Extensions
@model Sitecore.Demo.Retail.Feature.Catalog.Website.Models.ProductViewModel
@{
    if (Model == null)
    {
        return;
    }
}

<div id="C11-ProductInformation" class="m-b-1">
    <h1 id="title">@Html.Sitecore().Field(Model.TitleFieldName, Model.Item)</h1>
    <p id="description">@Model.DescriptionRender</p>
    <div class="col-md-12 col-xs-12">
        <div class="features" id="features">
            @Model.RenderFeatures()
        </div>
    </div>

    <div id="price-info" class="m-b-1">
        <div id="priceWithSavings">
            <h3 class="price-now">
                <span id="priceNow" data-bind="text: priceNow"></span>
                <span class="savings" id="savings" data-bind="text: savingsMessage"></span>
            </h3>
            <del class="price-before text-muted" id="price-before" data-bind="text: priceBefore"></del>
        </div>
        <div id="priceOnly">
            <h3 class="price-now" id="price" data-bind="text: priceNow"></h3>
        </div>
    </div>

    <input type="hidden" value="@Model.ProductId" id="product-id"/>
    <input type="hidden" value="@Model.CatalogName" id="product-catalog"/>
    <div class="stock-info m-b-1" id="stock-info">
        <div>
            <span id="stockStatus">
                <strong data-bind="text: selectedStockInfo().status"></strong>
            </span>
            / <span id="stockCount" data-bind="text:selectedStockInfo().count"></span>
            <!-- ko if: selectedStockInfo().showSingleLabel -->
            <label id="stockCountLabel">@Html.Sitecore().Text("/Catalog/Product Information/Item In Stock", "item")</label>
            <!-- /ko -->
            <!-- ko ifnot: selectedStockInfo().showSingleLabel -->
            <label id="stockCountLabel">@Html.Sitecore().Text("/Catalog/Product Information/Items In Stock", "items")</label>
            <!-- /ko -->
            <!-- ko if: selectedStockInfo().availabilityDate -->
            / <span id="stockAvailabilityDate" data-bind="text: selectedStockInfo().availabilityDate"></span>
            <!-- /ko -->
        </div>
        <a id="signForStockNotification" data-toggle="modal" data-target="#signForNotificationModal" title="@Html.Sitecore().Text("/Catalog/Product Information/Sign Up For Notification Tooltip", "Get a notification when the product is back in stock")" data-bind="visible: selectedStockInfo().showSignUpForNotification">
            @Html.Sitecore().Text("/Catalog/Product Information/Sign Up For Notification Link", "Get a notification when the product is back in stock")
        </a>
    </div>

    @if (Model.Variants != null && Model.Variants.Any())
    {
        var colors = Model.DistinctColourVariants;
        if (colors.Any())
        {
            <div class="color">
                <label for="variantColour">@Html.Sitecore().Text("/Catalog/Product Information/Color", "Color:")</label>
                <select class="form-control" name="Variant_Color" id="variantColor" onchange="VariantSelectionChanged()">
                    @foreach (var color in colors)
                    {
                        <option value="@color.ProductColor.GetHashCode()">@color.ProductColor</option>
                    }
                </select>
            </div>
        }
    }
    @if (Model.Variants != null && Model.Variants.Any())
    {
        var sizes = Model.Variants.Where(variant => !string.IsNullOrWhiteSpace(variant.Size)).Distinct(new VariantPropertiesEqualityComparer(VariantPropertiesComparisonProperty.Size));

        if (sizes.Any() && sizes.All(s => !string.IsNullOrEmpty(s.Size)))
        {
            <div class="size">
                <label for="variantSize">@Html.Sitecore().Text("/Catalog/Product Information/Size", "Size:")</label>
                <select class="form-control" name="Variant_Size" id="variantSize" onchange="VariantSelectionChanged()">
                    @foreach (var size in sizes)
                    {
                        <option value="@size.Size.GetHashCode()">@size.Size</option>
                    }
                </select>
            </div>
        }
    }
</div>

<div class="modal fade" id="signForNotificationModal" tabindex="-1" role="dialog" aria-labelledby="signForNotificationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id="signForNotificationModalMessages" class="wrap-error generic-error-handler" data-bind="visible: messages().shouldShowErrorList">
                <div class="container">
                    <div class="row">
                        <table>
                            <tbody data-bind="foreach: messages().errorList">
                            <tr>
                                <td>
                                    <p class="text-danger pull-left" pid=" errormessage" data-bind="text: errorMessage"></p>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-header">
                <button type="button" class="close" data-bind="click: close">
                    <span aria-hidden="true">&times;</span><span class="sr-only">@Html.Sitecore().Text("/Catalog/Product Information/Close", "Close")</span>
                </button>
                <h2 class="modal-title" id="signForNotificationModalLabel">@Html.Sitecore().Text("/Catalog/Product Information/Sign up for notification", "Sign up for notification")</h2>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="user-name">@Html.Sitecore().Text("/Catalog/Product Information/Name", "Name:")</label>
                    <input type="text" class="form-control" id="user-name" placeholder="@Html.Sitecore().Text("/Catalog/Product Information/Enter Name", "Enter your name")" data-bind="value: fullName">
                </div>

                <div class="form-group">
                    <label for="user-email">@Html.Sitecore().Text("/Catalog/Product Information/Email", "E-mail:")</label>
                    <input type="text" class="form-control" id="user-email" placeholder="@Html.Sitecore().Text("/Catalog/Product Information/Enter Email", "Enter e-mail")" data-bind="value: email">
                </div>
                <div class="form-group">
                    <label for="user-confirm-email">@Html.Sitecore().Text("/Catalog/Product Information/Confirm Email", "Confirm E-mail:")</label>
                    <input type="text" class="form-control" id="user-confirm-email" placeholder="@Html.Sitecore().Text("/Catalog/Product Information/Enter Confirm Email", "Enter your e-mail again")" data-bind="value: confirmEmail">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="signForNotificationButton" data-loading-text="@Html.Sitecore().Text("/Catalog/Product Information/Signing Up", "Signing up...")" data-bind="click: signUp, enable: signUpEnable">
                    @Html.Sitecore().Text("/Catalog/Product Information/Sign up", "Sign up")
                </button>
                <button type="button" class="btn btn-default" aria-hidden="true" id="signForNotificationClose" data-bind="click: close">
                    @Html.Sitecore().Text("/Catalog/Product Information/Close", "Close")
                </button>
            </div>
        </div>
    </div>
</div>

<span id="InvalidVariant" style="display: none">@Html.Sitecore().Text("/Catalog/Product Information/Invalid Variant", "This combination is not valid")</span>

<script type="text/javascript">
    $(document).ready(function () {
        initProductPriceInfo('price-info');

        @{
            var percentLead = Html.Sitecore().Text("/Catalog/Product Information/Save percent lead", "- Save up to");
            if (Model.Variants != null && Model.Variants.Any())
            {
                foreach (var variant in Model.Variants)
                {
                    var savingsMessage = string.Empty;
                    if (variant.IsOnSale)
                    {
                        savingsMessage = percentLead + " " + variant.SavingsPercentage + "%";
                    }

                    var sizeValue = string.IsNullOrWhiteSpace(variant.Size) ? string.Empty : variant.Size.GetHashCode().ToString();
                    var colorValue = string.IsNullOrWhiteSpace(variant.ProductColor) ? string.Empty : variant.ProductColor.GetHashCode().ToString();

                    @:AddVariantCombination('@sizeValue', '@colorValue', '@variant.Id', '@variant.ListPrice.ToCurrency()', '@variant.AdjustedPrice.ToCurrency()', @variant.IsOnSale.ToString().ToLower(), '@savingsMessage');
                }
            }
            else
            {
                var savingsMessage = string.Empty;
                if (Model.IsOnSale)
                {
                    savingsMessage = percentLead + " " + Model.SavingsPercentage + "%";
                }

                @:switchProductPriceInfo('@Model.ListPriceWithCurrency', '@Model.AdjustedPriceWithCurrency', @Model.IsOnSale.ToString().ToLower(), '@savingsMessage');
            }
        }
    });
</script>