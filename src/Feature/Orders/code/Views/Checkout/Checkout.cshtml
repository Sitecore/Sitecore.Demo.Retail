@*//-----------------------------------------------------------------------
    // Copyright 2016 Sitecore Corporation A/S
    // Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
    // except in compliance with the License. You may obtain a copy of the License at
    //       http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software distributed under the
    // License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // either express or implied. See the License for the specific language governing permissions
    // and limitations under the License.
    // -------------------------------------------------------------------------------------------*@
@using Sitecore.Feature.Commerce.Orders.Models
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Foundation.Commerce.Extensions
@using Newtonsoft.Json;

@model CheckoutViewModel

<div class="row">
    <div class="col-md-12" data-bind="foreach: Object.keys(groupedLines)">
        <div class="m-b-1">
            <h4 data-bind="text: $data"></h4>
            <table class="table">
                <tbody>
                    <tr class="row">
                        <th class="col-md-6 hidden-xs" colspan="2">@Html.Sitecore().Field("Product Label", Html.Sitecore().CurrentItem)</th>
                        <th class="col-md-4 visible-xs">@Html.Sitecore().Field("Product Label", Html.Sitecore().CurrentItem)</th>
                        <th class="col-md-1">@Html.Sitecore().Field("Quantity Label", Html.Sitecore().CurrentItem)</th>
                        <th class="col-md-2 hidden-xs text-right">@Html.Sitecore().Field("Unit Price Label", Html.Sitecore().CurrentItem)</th>
                        <th class="col-md-2 text-right">@Html.Sitecore().Field("Total Label", Html.Sitecore().CurrentItem)</th>
                        <th class="col-md-1">&nbsp;</th>
                    </tr>
                </tbody>
                <tbody data-bind="foreach: model.groupedLines[$data]">
                    <tr class="row">
                        <td class="hidden-xs">
                            <a data-bind="attr: {href: model.LineHrefs[$data.ExternalCartLineId]}">
                                <img class="img-responsive" data-bind="attr: {src: model.LineImgSrcs[$data.ExternalCartLineId]}">
                            </a>
                        </td>
                        <td class="cart-info">
                            <a data-bind="attr: {href: model.LineHrefs[$data.ExternalCartLineId]}">
                                <h5 pid="title" data-bind="text: $data.Product.ProductName"></h5>
                            </a>
                        </td>
                        <td class="cart-quantity" style="width: 10%;">
                            <input pid="quantity" type="number" class="form-control form-control-quantity"
                                   placeholder="1" data-bind="value: $data.Quantity">
                        </td>
                        <td class="cart-price text-right hidden-xs">
                            <span pid="price" data-bind="text: $data.Product.Price.Amount.toCurrency()"></span>
                        </td>
                        <td class="cart-total text-right">
                            <strong pid="total" data-bind="text: $data.Total.Amount.toCurrency()"></strong>
                        </td>
                        <td class="cart-delete">
                            <a pid="remove" class="delete-item">
                                <span class="glyphicon glyphicon-remove icon-md"></span>
                            </a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="row m-b-1">
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Html.Sitecore().Field("Shipment Details Header", Html.Sitecore().CurrentItem)</h3>
            </div>
            <div class="panel-body">
                <div class="row" data-bind="if: groupedLines['Ship items'] && !isChangingShippingAddress()">
                    <div class="col-md-3">
                        <strong>@Html.Sitecore().Field("Shipping Address Label", Html.Sitecore().CurrentItem)</strong>
                    </div>
                    <div class="col-md-7">
                        <span data-bind="text: shippingAddress.recipient"></span><br>
                        <span data-bind="text: shippingAddress.addressLine1"></span><br>
                        <span data-bind="text: shippingAddress.addressLine2"></span>
                        <br data-bind="visible: shippingAddress.addressLine2">
                        <span data-bind="text: shippingAddress.city"></span>
                        <span data-bind="text: shippingAddress.province"></span>
                        <span data-bind="text: shippingAddress.postalCode"></span><br>
                        <span data-bind="text: getCountryElement(shippingAddress.country).split('|')[1]"></span>
                    </div>
                    <div class="col-md-2">
                        <a href="javascript: model.isChangingShippingAddress(true);">@Html.Sitecore().Field("Address Change Link Text", Html.Sitecore().CurrentItem)</a>
                    </div>
                </div>
                <div class="row" data-bind="if: groupedLines['Ship items'] && isChangingShippingAddress">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label for="shippingAddress_recipient" class="col-md-2 control-label">@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-9">
                                <input type="text" id="shippingAddress_recipient" class="form-control input-sm"
                                       placeholder="@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem)"
                                       data-bind="value: shippingAddress.recipient">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="shippingAddress_addressLine1" class="col-md-2 control-label">@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-9">
                                <input type="text" class="form-control input-sm" id="shippingAddress_addressLine1"
                                       placeholder="@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem)"
                                       data-bind="value: shippingAddress.addressLine1">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="shippingAddress_addressLine2" class="col-md-2 control-label">@Html.Sitecore().Field("Address Line 2 Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-9">
                                <input type="text" class="form-control input-sm" id="shippingAddress_addressLine2"
                                       placeholder="@Html.Sitecore().Field("Address Line 2 Label", Html.Sitecore().CurrentItem)"
                                       data-bind="value: shippingAddress.addressLine2">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="shippingAddress_city" class="col-md-2 control-label">@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-3">
                                <input type="text" class="form-control input-sm" id="shippingAddress_city"
                                       placeholder="@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem)"
                                       data-bind="value: shippingAddress.city">
                            </div>
                            <label for="shippingAddress_province" class="col-md-1 control-label">@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-2">
                                <select id="shippingAddress_province" class="form-control"
                                        data-bind="value: shippingAddress.province,
                                               options: model.activeShippingRegions,
                                               optionsValue: function(c) { return c.split('|')[0]; },
                                               optionsText: function(c) { return c.split('|')[1]; },
                                               optionsCaption: '@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem)'"></select>
                            </div>
                            <label for="shippingAddress_postalCode" class="col-md-1 control-label">@Html.Sitecore().Field("Address Postal Code Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-2">
                                <input type="text" class="form-control input-sm" id="shippingAddress_postalCode"
                                       data-bind="value: shippingAddress.postalCode">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="shippingAddress_country" class="col-md-2 control-label">@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-7">
                                <select id="shippingAddress_country" class="form-control" onchange="setTimeout(updateRegions, 200);"
                                        data-bind="value: shippingAddress.country,
                                               options: Object.keys(model.CountriesRegions),
                                               optionsValue: function(c) { return c.split('|')[0]; },
                                               optionsText: function(c) { return c.split('|')[1]; },
                                               optionsCaption: '@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem)'"></select>
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-default" onclick="setShippingAddress(); return false;">Done</button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="row" data-bind="if: groupedLines['Ship items']">
                    <div class="col-md-3">
                        <strong>@Html.Sitecore().Field("Shipment Options Label", Html.Sitecore().CurrentItem)</strong>
                    </div>
                    <div class="col-md-9">
                        <div id="shippingMethodsContainer" class="form-group shipping-options"
                             data-bind="foreach: Object.keys(ShippingOptions)">
                            <div class="form-group">
                                <div class="checkbox">
                                    <label>
                                        <input type="radio" style="margin-left: 20px" name="shippingMethodId"
                                               data-bind="value: $data, checked: model.selectedShippingMethod"> &nbsp;
                                        <span data-bind="text: model.ShippingOptions[$data]"></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div data-bind="if: groupedLines['Digital']">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label for="shippingAddress_email" class="col-md-3 control-label">@Html.Sitecore().Field("Shipment Email Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-8">
                                <input type="text" id="shippingAddress_email" class="form-control input-sm"
                                       onfocusout="saveEmail();"
                                       placeholder="@Html.Sitecore().Field("Shipment Email Label", Html.Sitecore().CurrentItem)"
                                       data-bind="value: email">
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">@Html.Sitecore().Field("Payment Details Header", Html.Sitecore().CurrentItem)</h3>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-3">
                        <strong>@Html.Sitecore().Field("Payment Address Label", Html.Sitecore().CurrentItem)</strong>
                    </div>
                    <div class="col-md-7">
                        Same as shipping address
                    </div>
                    <div class="col-md-2">
                        <a href="">Change</a>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">&nbsp;</div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <strong>@Html.Sitecore().Field("Payment Type Label", Html.Sitecore().CurrentItem)</strong>
                    </div>
                    <div class="col-md-9">
                        <div class="dropdown">
                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                Credit Card
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                <li>
                                    <a href="#">Credit Card</a>
                                </li>
                                <li role="separator" class="divider"></li>
                                <li>
                                    <a href="#">Paypal</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label for="creditCardNumber" class="col-md-2 control-label">@Html.Sitecore().Field("Credit Card Number Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-5">
                                <input type="number" class="form-control" id="creditCardNumber" placeholder="">
                            </div>
                            <label for="creditCartExpiration" class="col-md-2 control-label">@Html.Sitecore().Field("Credit Card Expiration Label", Html.Sitecore().CurrentItem)</label>
                            <div class="col-md-2">
                                <input type="text" class="form-control" id="creditCartExpiration" placeholder="MM/YY">
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="pull-right">
                &nbsp;
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <td class="text">
                                <strong>@Html.Sitecore().Field("Items Label", Html.Sitecore().CurrentItem)</strong>
                            </td>
                            <td id="confirm-subTotal" class="text-right" pid="subtotal">
                                <strong data-bind="text: Cart.Total.Subtotal.toCurrency()"></strong>
                            </td>
                        </tr>
                        <tr>
                            <td class="text">
                                @Html.Sitecore().Field("Shipping Label", Html.Sitecore().CurrentItem)
                            </td>
                            <td id="confirm-shippingTotal" class="text-right" pid="shippingTotal" data-bind="text: Cart.Total.ShippingTotal.toCurrency()"></td>
                        </tr>
                        <tr>
                            <td class="text">@Html.Sitecore().Field("Taxes Label", Html.Sitecore().CurrentItem)</td>
                            <td idd="confirm-taxTotal" class="text-right" pid="taxTotal" data-bind="text: Cart.Total.TaxTotal.Amount.toCurrency()"></td>
                        </tr>
                        <tr>
                            <td class="text">
                                <em>@Html.Sitecore().Field("Savings Label", Html.Sitecore().CurrentItem)</em>
                            </td>
                            <td id="confirm-discountTotal" class="text-right">
                                <em data-bind="text: Cart.Total.OrderLevelDiscountAmount.toCurrency()"></em>
                            </td>
                        </tr>
                        <tr>
                            <td class="text">
                                <strong>@Html.Sitecore().Field("Total Label", Html.Sitecore().CurrentItem)</strong>
                            </td>
                            <td id="confirm-total" class="text-right">
                                <strong data-bind="text: Cart.Total.Amount.toCurrency()"></strong>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    var rendering = $("main section div.container");

    var currencyFormat = function() {
        var currency = '@Html.Raw(((decimal)1111111111.222222).ToCurrency())'; // 1111111111.222222 transformed with ToCurrency.

        var format = {
            decimalDelimiter: null,
            decimalPlaces: 0,
            wholeNumberDelimiter: null,
            wholeNumberPlaces: null
        };

        // However many 2's there are is the number of decimal places there are.
        for (var c = 0; c < currency.length; c++)
            if (currency[c] == '2')
                format.decimalPlaces++;

        // The character immediately before the first '2' should be the decimal delimiter.
        // If that happens to be a 1, there is something very wrong.  Just set the
        // decimalDelimiter to '.' and run away.
        var index = currency.indexOf('2');
        if (index > 0)
            format.decimalDelimiter = currency[index - 1];
        if (format.decimalDelimiter == '1') {
            format.decimalDelimiter = '.';
            return format;
        }

        // Start at the last '1' and move forward until there isn't a 1.
        // The first character not a 1 before the first 1 should be the
        // wholeNumberDelimiter and we will know how many places there
        // are per whole number group.  However, if we only see 1's
        // without a non-1 between them, there is no delimiter.
        index = currency.lastIndexOf('1');
        var firstOne = currency.indexOf('1');
        var count = 0;
        while (index > firstOne) {
            count++;
            index--;
            if (currency[index] != '1') {
                format.wholeNumberDelimiter = currency[index];
                format.wholeNumberPlaces = count;
                break;
            }
        }

        return format;
    }();

    Number.prototype.toCurrency = function() {
        var numStr = this.toFixed(currencyFormat.decimalPlaces);
        var numSplit = numStr.split('.');

        if (currencyFormat.wholeNumberPlaces) {
            var i = numSplit[0].length - currencyFormat.wholeNumberPlaces;
            while (i > 0) {
                numSplit[0].substring(0, i) +
                    currencyFormat.wholeNumberDelimiter +
                    numSplit[0].substring(i)
                i -= currencyFormat.wholeNumberPlaces;
            }
        }

        numStr = numSplit[0];
        if (numSplit.length > 0)
            numStr += currencyFormat.decimalDelimiter + numSplit[1];

        var onePointTwos = '@Html.Raw(((decimal)1.222222).ToCurrency())'; // 1.222222 transformed with ToCurrency.
        var token = '1';
        if (currencyFormat.decimalPlaces)
            token += currencyFormat.decimalDelimiter + '2'.repeat(currencyFormat.decimalPlaces);
        return onePointTwos.split(token).join(numStr);
    }

    String.prototype.toCurrency = function() {
        var num = parseFloat(this);
        if (num)
            return num.toCurrency();
    }

    function createAddress() {
        return {
            recipient: null,
            addressLine1: null,
            addressLine2: null,
            city: null,
            province: null,
            postalCode: null,
            country: 'US'
        }
    }

    function getCountryElement(countryCode) {
        return _.find(Object.keys(model.CountriesRegions), function(c) {
            return c.substr(0, 2) == countryCode;
        });
    }

    function saveEmail() {
    	Cookies.set("email", $("#shippingAddress_email").val());
    }

    function setShippingAddress() {
        var errors = [];

        if (!model.shippingAddress.recipient)
            errors.push('@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!model.shippingAddress.addressLine1)
            errors.push('@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!model.shippingAddress.city)
            errors.push('@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!model.shippingAddress.province && model.activeShippingRegions().length)
            errors.push('@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!model.shippingAddress.postalCode)
            errors.push('@Html.Sitecore().Field("Address Postal Code Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!model.shippingAddress.country)
            errors.push('@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem) is a required field.');

        if (errors.length) {
            showErrors("Error Saving Address", errors);
            return;
        }

        Cookies.set('shippingAddress', JSON.stringify(model.shippingAddress));
        model.isChangingShippingAddress(false);
    }

    function showErrors(caption, errors) {
        if (errors.constructor == String)
            errors = [errors];

        var html =
            '<div class="alert alert-danger alert-dismissible" role="alert">' +
            '<button type="button" class="close pull-right" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>';
        if (caption)
            html += '<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"> ' +
                '<strong>' + caption + '</strong><br>';

        html += errors.join('<br>');
        html += '</div>';
        rendering.prepend($(html));

        window.scrollTo(0, 0);
    }

    function updateRegions() {
        var country = getCountryElement(model.shippingAddress.country);
        model.activeShippingRegions(model.CountriesRegions[country] || []);
    }



    var model = @Html.Raw(JsonConvert.SerializeObject(Model));

    model.groupedLines = {};
    $.each(model.Cart.Lines, function(index, line) {
        var option = model.LineShippingOptions[line.ExternalCartLineId];
        if (!model.groupedLines[option.Description])
            model.groupedLines[option.Description] = [];
        model.groupedLines[option.Description].push(line);
    });

    model.shippingAddress = JSON.parse(Cookies.get('shippingAddress') || null);
    model.isChangingShippingAddress = ko.observable(!model.shippingAddress);
    if (model.isChangingShippingAddress())
        model.shippingAddress = createAddress();
    if (!model.selectedShippingMethod)
    	model.selectedShippingMethod = _.head(Object.keys(model.ShippingOptions));

    model.email = Cookies.get('email');

    model.paymentAddress = JSON.parse(Cookies.get('paymentAddress') || null);

    model.activeShippingRegions = ko.observableArray();
    updateRegions();

    ko.applyBindings(model, rendering[0]);
</script>