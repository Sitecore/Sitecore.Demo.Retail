@*//-----------------------------------------------------------------------
        // Copyright 2016 Sitecore Corporation A/S
        // Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
    // except in compliance with the License. You may obtain a copy of the License at
        //       http://www.apache.org/licenses/LICENSE-2.0
        //
        // Unless required by applicable law or agreed to in writing, software distributed under the
        // License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
        // either express or implied. See the License for the specific language governing permissions
        // and limitations under the License.
        // -------------------------------------------------------------------------------------------*@
@using Sitecore.Feature.Commerce.Orders.Website.Models
@using Sitecore.Foundation.Commerce.Website.Extensions
@using Newtonsoft.Json;

@model CheckoutViewModel

<div class="row">
    <div class="col-md-10" data-bind="foreach: Object.keys(groupedLines)">
        <div class="m-b-1">
            <h4 data-bind="text: $data"></h4>
            <table class="table">
                <tbody>
                <tr class="row">
                    <th class="col-md-6 hidden-xs" colspan="2">@Html.Sitecore().Field("Product Label", Html.Sitecore().CurrentItem)</th>
                    <th class="col-md-4 visible-xs">@Html.Sitecore().Field("Product Label", Html.Sitecore().CurrentItem)</th>
                    <th class="col-md-1">@Html.Sitecore().Field("Quantity Label", Html.Sitecore().CurrentItem)</th>
                    <th class="col-md-2 hidden-xs text-right">@Html.Sitecore().Field("Unit Price Label", Html.Sitecore().CurrentItem)</th>
                    <th class="col-md-2 text-right">@Html.Sitecore().Field("Total Label", Html.Sitecore().CurrentItem)</th>
                    <th class="col-md-1">&nbsp;</th>
                </tr>
                </tbody>
                <tbody data-bind="foreach: model.groupedLines[$data]">
                <tr class="row">
                    <td class="hidden-xs">
                        <a data-bind="attr: {href: model.LineHrefs[$data.ExternalCartLineId]}">
                            <img class="img-responsive" data-bind="attr: {src: model.LineImgSrcs[$data.ExternalCartLineId]}">
                        </a>
                    </td>
                    <td class="cart-info">
                        <a data-bind="attr: {href: model.LineHrefs[$data.ExternalCartLineId]}">
                            <h5 pid="title" data-bind="text: $data.Product.ProductName"></h5>
                        </a>
                    </td>
                    <td class="cart-quantity" style="width: 10%;">
                        <input pid="quantity" type="number" class="form-control form-control-quantity" placeholder="1"
                               data-bind="value: $data.Quantity, attr: {'data-ExternalCartLineId': $data.ExternalCartLineId}"
                               onfocusout="var input = this; setTimeout(function() { updateLineItem(input); }, 200);">
                    </td>
                    <td class="cart-price text-right hidden-xs">
                        <span pid="price" data-bind="text: $data.Product.Price.Amount.toCurrency()"></span>
                    </td>
                    <td class="cart-total text-right">
                        <strong pid="total" data-bind="text: $data.Total.Amount.toCurrency()"></strong>
                    </td>
                    <td class="cart-delete">
                        <a pid="remove" class="delete-item" href="#" data-bind="click: deleteLineItem">
                            <span class="glyphicon glyphicon-remove icon-md"></span>
                        </a>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-md-2">
        &nbsp;<br><br>
        <div class="panel panel-default affix">
            <div class="panel-body">
                <strong>@Html.Sitecore().Field("Items Label", Html.Sitecore().CurrentItem)</strong> &nbsp;
                <strong class="pull-right" data-bind="text: Cart.Total.Subtotal.toCurrency()"></strong>
                <br><br>
                @Html.Sitecore().Field("Shipping Label", Html.Sitecore().CurrentItem)
                <span class="pull-right" data-bind="text: Cart.Total.ShippingTotal.toCurrency()"></span> &nbsp;
                <br><br>
                @Html.Sitecore().Field("Taxes Label", Html.Sitecore().CurrentItem)
                <span class="pull-right" data-bind="text: Cart.Total.TaxTotal.Amount.toCurrency()"></span> &nbsp;
                <br><br>
                <em>@Html.Sitecore().Field("Savings Label", Html.Sitecore().CurrentItem)</em> &nbsp;
                <em class="pull-right" data-bind="text: Cart.Total.OrderLevelDiscountAmount.toCurrency()"></em>
                <br><br>
                <strong>@Html.Sitecore().Field("Total Label", Html.Sitecore().CurrentItem)</strong> &nbsp;
                <strong class="pull-right" data-bind="text: Cart.Total.Amount.toCurrency()"></strong>
            </div>
        </div>
    </div>
</div>

<div class="row">
<div class="col-md-5">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">@Html.Sitecore().Field("Shipment Details Header", Html.Sitecore().CurrentItem)</h3>
        </div>
        <div class="panel-body">
            <div class="row" data-bind="if: groupedLines['Ship items'] && !isChangingShippingAddress()">
                <div class="col-md-3">
                    <strong>@Html.Sitecore().Field("Shipping Address Label", Html.Sitecore().CurrentItem)</strong>
                </div>
                <div class="col-md-7">
                    <span data-bind="text: UserName"></span><br>
                    <span data-bind="text: shippingAddress.Address1"></span><br>
                    <span data-bind="text: shippingAddress.address2"></span>
                    <br data-bind="visible: shippingAddress.Address2">
                    <span data-bind="text: shippingAddress.City"></span>
                    <span data-bind="text: shippingAddress.Region"></span>
                    <span data-bind="text: shippingAddress.ZipPostalCode"></span><br>
                    <span data-bind="text: getCountryElement(shippingAddress.Country).split('|')[1]"></span>
                </div>
                <div class="col-md-2">
                    <a href="javascript: model.isChangingShippingAddress(true);javascript:void(0);">@Html.Sitecore().Field("Address Change Link Text", Html.Sitecore().CurrentItem)</a>
                </div>
            </div>
            <div class="row" data-bind="if: groupedLines['Ship items'] && isChangingShippingAddress">
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="shippingAddress_Name" class="col-md-2 control-label">@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-9">
                            <input type="text" id="shippingAddress_Name" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: UserName">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="shippingAddress_Address1" class="col-md-2 control-label">@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-9">
                            <input type="text" id="shippingAddress_Address1" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: shippingAddress.Address1">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="shippingAddress_Address2" class="col-md-2 control-label">@Html.Sitecore().Field("Address Line 2 Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-9">
                            <input type="text" id="shippingAddress_Address2" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Address Line 2 Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: shippingAddress.Address2">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="shippingAddress_City" class="col-md-2 control-label">@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-3">
                            <input type="text" id="shippingAddress_City" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: shippingAddress.City">
                        </div>
                        <label for="shippingAddress_State" class="col-md-2 control-label">@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-4">
                            <select id="shippingAddress_State" class="form-control"
                                    data-bind="value: shippingAddress.Region,
                                                   options: model.activeShippingRegions,
                                                   optionsValue: function(c) { return c.split('|')[0]; },
                                                   optionsText: function(c) { return c.split('|')[1]; },
                                                   optionsCaption: '@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem)'"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="shippingAddress_ZipPostalCode" class="col-md-2 control-label">@Html.Sitecore().Field("Address Postal Code Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-3">
                            <input type="text" id="shippingAddress_ZipPostalCode" class="form-control input-sm"
                                   data-bind="value: shippingAddress.ZipPostalCode">
                        </div>
                        <label for="shippingAddress_Country" class="col-md-2 control-label">@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-4">
                            <select id="shippingAddress_Country" class="form-control" onchange="setTimeout(updateShippingRegions, 200);"
                                    data-bind="value: shippingAddress.Country,
                                                   options: Object.keys(model.CountriesRegions),
                                                   optionsValue: function(c) { return c.split('|')[0]; },
                                                   optionsText: function(c) { return c.split('|')[1]; },
                                                   optionsCaption: '@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem)'"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-2 col-md-offset-9">
                            <button type="button" class="btn btn-default" onclick="setShippingAddress(); return false;">
                                @Html.Sitecore().Field("Address Done Button Text", Html.Sitecore().CurrentItem)
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="row" data-bind="if: groupedLines['Ship items']">
                <div class="col-md-3">
                    <strong>@Html.Sitecore().Field("Shipment Options Label", Html.Sitecore().CurrentItem)</strong>
                </div>
                <div class="col-md-9">
                    <div id="shippingMethodsContainer" class="form-group shipping-options"
                         data-bind="foreach: Object.keys(ShippingOptions)">
                        <div class="form-group">
                            <div class="checkbox">
                                <label>
                                    <input type="radio" style="margin-left: 20px" name="shippingOptionID"
                                           data-bind="value: $data, checked: model.shippingOptionID"
                                           onchange="setShippingOptionID(value);"> &nbsp;
                                    <span data-bind="text: model.ShippingOptions[$data]"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="email" class="col-md-3 control-label">@Html.Sitecore().Field("Shipment Email Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-8">
                            <input type="text" id="email" class="form-control input-sm"
                                   onfocusout="setEmail();"
                                   placeholder="@Html.Sitecore().Field("Shipment Email Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: email">
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="col-md-5">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">@Html.Sitecore().Field("Payment Details Header", Html.Sitecore().CurrentItem)</h3>
        </div>
        <div class="panel-body">
            <div class="row" data-bind="if: !isChangingBillingAddress()">
                <div class="col-md-3">
                    <strong>@Html.Sitecore().Field("Payment Address Label", Html.Sitecore().CurrentItem)</strong>
                </div>
                <div class="col-md-7">
                    <!-- ko if: billingAddress -->
                    <span data-bind="text: billingAddress.Name"></span><br>
                    <span data-bind="text: billingAddress.Address1"></span><br>
                    <span data-bind="text: billingAddress.address2"></span>
                    <br data-bind="visible: billingAddress.Address2">
                    <span data-bind="text: billingAddress.City"></span>
                    <span data-bind="text: billingAddress.Region"></span>
                    <span data-bind="text: billingAddress.ZipPostalCode"></span><br>
                    <span data-bind="text: getCountryElement(billingAddress.Country).split('|')[1]"></span>
                    <!-- /ko -->
                    <!-- ko ifnot: billingAddress -->
                    @Html.Sitecore().Field("Same As Shipping Address Text", Html.Sitecore().CurrentItem)
                    <!-- /ko -->
                </div>
                <div class="col-md-2">
                    <a href="javascript: changeBillingAddress();">@Html.Sitecore().Field("Address Change Link Text", Html.Sitecore().CurrentItem)</a>
                </div>
            </div>
            <div class="row" data-bind="if: isChangingBillingAddress">
                <form class="form-horizontal">
                    <div class="form-group">
                        <label for="billingAddress_Name" class="col-md-2 control-label">@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-9">
                            <input type="text" id="billingAddress_Name" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: billingAddress.Name">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="billingAddress_Address1" class="col-md-2 control-label">@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-9">
                            <input type="text" id="billingAddress_Address1" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: billingAddress.Address1">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="billingAddress_Address2" class="col-md-2 control-label">@Html.Sitecore().Field("Address Line 2 Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-9">
                            <input type="text" id="billingAddress_Address2" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Address Line 2 Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: billingAddress.Address2">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="billingAddress_City" class="col-md-2 control-label">@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-3">
                            <input type="text" id="billingAddress_City" class="form-control input-sm"
                                   placeholder="@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem)"
                                   data-bind="value: billingAddress.City">
                        </div>
                        <label for="billingAddress_State" class="col-md-2 control-label">@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-4">
                            <select id="billingAddress_State" class="form-control"
                                    data-bind="value: billingAddress.Region,
                                                   options: model.activeBillingRegions,
                                                   optionsValue: function(c) { return c.split('|')[0]; },
                                                   optionsText: function(c) { return c.split('|')[1]; },
                                                   optionsCaption: '@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem)'"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="billingAddress_ZipPostalCode" class="col-md-2 control-label">@Html.Sitecore().Field("Address Postal Code Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-3">
                            <input type="text" id="billingAddress_ZipPostalCode" class="form-control input-sm"
                                   data-bind="value: billingAddress.ZipPostalCode">
                        </div>
                        <label for="billingAddress_Country" class="col-md-2 control-label">@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem)</label>
                        <div class="col-md-4">
                            <select id="billingAddress_Country" class="form-control" onchange="setTimeout(updateBillingRegions, 200);"
                                    data-bind="value: billingAddress.Country,
                                                   options: Object.keys(model.CountriesRegions),
                                                   optionsValue: function(c) { return c.split('|')[0]; },
                                                   optionsText: function(c) { return c.split('|')[1]; },
                                                   optionsCaption: '@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem)'"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-9">
                            <button type="button" class="btn btn-default" onclick="useShippingAddress(); return false;"
                                    data-bind="visible: model.groupedLines['Ship items'] && model.groupedLines['Ship items'].length">
                                @Html.Sitecore().Field("Use Shipping Address Button Text", Html.Sitecore().CurrentItem)
                            </button>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-default" onclick="setBillingAddress(); return false;">
                                @Html.Sitecore().Field("Address Done Button Text", Html.Sitecore().CurrentItem)
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="row">
                <div class="col-md-12">&nbsp;</div>
            </div>
            <div class="row">
                <div class="col-md-10 col-md-offset-1">

                    <form>
                        <div class="show-payment">
                            <div>
                                <div id="dropin-container"></div>
                            </div>
                        </div>

                        <div id="btn-billing-next" class="btn btn-success pull-right" style="margin-top:24px">
                            <button id="ToConfirmButton" data-loading-text="processing" class="btn btn-lg btn-success">Complete Order <span class="glyphicon glyphicon-chevron-right"></span></button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

<script src="https://js.braintreegateway.com/js/braintree-2.27.0.min.js"></script>
<script src="/Scripts/Orders/main.js"></script>

<script>
    if (!String.prototype.repeat) {
        String.prototype.repeat = function(count) {
            'use strict';
            if (this == null) {
                throw new TypeError('can\'t convert ' + this + ' to object');
            }
            var str = '' + this;
            count = +count;
            if (count != count) {
                count = 0;
            }
            if (count < 0) {
                throw new RangeError('repeat count must be non-negative');
            }
            if (count == Infinity) {
                throw new RangeError('repeat count must be less than infinity');
            }
            count = Math.floor(count);
            if (str.length == 0 || count == 0) {
                return '';
            }
            // Ensuring count is a 31-bit integer allows us to heavily optimize the
            // main part. But anyway, most current (August 2014) browsers can't handle
            // strings 1 << 28 chars or longer, so:
            if (str.length * count >= 1 << 28) {
                throw new RangeError('repeat count must not overflow maximum string size');
            }
            var rpt = '';
            for (;;) {
                if ((count & 1) == 1) {
                    rpt += str;
                }
                count >>>= 1;
                if (count == 0) {
                    break;
                }
                str += str;
            }
            // Could we try:
            // return Array(count + 1).join(this);
            return rpt;
        }
    }

    var rendering = $("main section div.container");

    var currencyFormat = function() {
        var currency = '@Html.Raw(((decimal)1111111111.222222).ToCurrency())'; // 1111111111.222222 transformed with ToCurrency.

        var format = {
            decimalDelimiter: null,
            decimalPlaces: 0,
            wholeNumberDelimiter: null,
            wholeNumberPlaces: null
        };

        // However many 2's there are is the number of decimal places there are.
        for (var c = 0; c < currency.length; c++)
            if (currency[c] == '2')
                format.decimalPlaces++;

        // The character immediately before the first '2' should be the decimal delimiter.
        // If that happens to be a 1, there is something very wrong.  Just set the
        // decimalDelimiter to '.' and run away.
        var index = currency.indexOf('2');
        if (index > 0)
            format.decimalDelimiter = currency[index - 1];
        if (format.decimalDelimiter == '1') {
            format.decimalDelimiter = '.';
            return format;
        }

        // Start at the last '1' and move forward until there isn't a 1.
        // The first character not a 1 before the first 1 should be the
        // wholeNumberDelimiter and we will know how many places there
        // are per whole number group.  However, if we only see 1's
        // without a non-1 between them, there is no delimiter.
        index = currency.lastIndexOf('1');
        var firstOne = currency.indexOf('1');
        var count = 0;
        while (index > firstOne) {
            count++;
            index--;
            if (currency[index] != '1') {
                format.wholeNumberDelimiter = currency[index];
                format.wholeNumberPlaces = count;
                break;
            }
        }

        return format;
    }();

    Number.prototype.toCurrency = function() {
        var numStr = this.toFixed(currencyFormat.decimalPlaces);
        var numSplit = numStr.split('.');

        if (currencyFormat.wholeNumberPlaces) {
            var i = numSplit[0].length - currencyFormat.wholeNumberPlaces;
            while (i > 0) {
                numSplit[0].substring(0, i) +
                    currencyFormat.wholeNumberDelimiter +
                    numSplit[0].substring(i)
                i -= currencyFormat.wholeNumberPlaces;
            }
        }

        numStr = numSplit[0];
        if (numSplit.length > 0)
            numStr += currencyFormat.decimalDelimiter + numSplit[1];

        var onePointTwos = '@Html.Raw(((decimal)1.222222).ToCurrency())'; // 1.222222 transformed with ToCurrency.
        var token = '1';
        if (currencyFormat.decimalPlaces)
            token += currencyFormat.decimalDelimiter + '2'.repeat(currencyFormat.decimalPlaces);
        return onePointTwos.split(token).join(numStr);
    }

    String.prototype.toCurrency = function() {
        var num = parseFloat(this);
        if (num)
            return num.toCurrency();
    }

    function applyModel() {
        applyModel.originalHTML = applyModel.originalHTML || rendering[0].innerHTML;
        rendering[0].innerHTML = applyModel.originalHTML;

        // Cart
        model.groupedLines = {};
        $.each(model.Cart.Lines, function(index, line) {
            var option = model.LineShippingOptions[line.ExternalCartLineId];
            if (!model.groupedLines[option.Description])
                model.groupedLines[option.Description] = [];
            model.groupedLines[option.Description].push(line);
        });

        // Shipping Details
        model.shippingAddress = JSON.parse(Cookies.get('shippingAddress') || null);
        if (model.shippingAddress == null) {
            model.shippingAddress = model.DefaultAddress;
        } else {
            model.UserName = model.shippingAddress.Name;
        }

        model.isChangingShippingAddress = ko.observable(!model.shippingAddress || !model.UserName);
        if (model.isChangingShippingAddress()) {
            if (model.shippingAddress == null)
                model.shippingAddress = createAddress();
        }

        model.shippingOptionID = Cookies.get('shippingOptionID') ||
            _.head(Object.keys(model.ShippingOptions));

        model.activeShippingRegions = ko.observableArray();
        updateShippingRegions();

        if (Cookies.get('email') != null) {
            model.email = Cookies.get('email');
        }
        else {
            model.email = model.Cart.Email;
        }

        // Payment Details
        model.billingAddress = JSON.parse(Cookies.get('billingAddress') || null);
        model.isChangingBillingAddress = ko.observable(!model.billingAddress &&
            (!model.groupedLines['Ship items'] || !model.shippingAddress));
        if (model.isChangingBillingAddress())
            model.billingAddress = createAddress();

        model.activeBillingRegions = ko.observableArray();
        updateBillingRegions();

        model.isReadyToCheckout = ko.observable();
        updateIsReadyToCheckout();

        // Apply model
        ko.cleanNode(rendering[0]);
        ko.applyBindings(model, rendering[0]);

        braintree.setup(model.PaymentClientToken, "dropin", {
            container: "dropin-container",
            paymentMethodNonceReceived: function (event, nonce) {
                if (nonce.length > 0) {
                    model.cardPaymentResultAccessCode = nonce;
                    model.cardPaymentAcceptCardPrefix = "paypal";
                    setPaymentMethodsSinglePageCheckout();
                }
            },
            paypal: {
                singleUse: true,
                amount: 10.00,
                currency: 'USD',
                onSuccess: function (nonce, email) {
                    if (nonce.length > 0) {
                        model.cardPaymentResultAccessCode = nonce;
                        model.cardPaymentAcceptCardPrefix = "paypal";
                        setPaymentMethodsSinglePageCheckout();
                    }
                }
            }
        });
    }

    function changeBillingAddress() {
        model.billingAddress = model.billingAddress || createAddress();
        model.isChangingBillingAddress(true);
        updateBillingRegions();
    }

    function cleanGuid(guid) {
        guid = guid.split('{').join('');
        guid = guid.split('}').join('');
        return guid.toLowerCase();
    }

    function createAddress() {
        return {
            Name: null,
            Address1: null,
            Address2: null,
            City: null,
            Region: null,
            ZipPostalCode: null,
            Country: 'US',
            PartyID: '0'
        }
    }

    function deleteLineItem(cartLine, event) {
        var $target = $(event.target);
        $target.attr('class', 'icon-md fa fa-refresh fa-spin fa-3x fa-fw');
        AJAXPost(StorefrontUri('api/storefront/cart/DeleteLineItem'),
            JSON.stringify({ExternalCartLineId: cartLine.ExternalCartLineId}),
            updateModel);
    }

    function getCountryElement(countryCode) {
        return _.find(Object.keys(model.CountriesRegions), function(c) {
            return c.substr(0, 2) == countryCode;
        });
    }

    function setBillingAddress() {
        updateModel();	
        if (model.billingAddress && !validateAddress(model.billingAddress))
            return;

        Cookies.set('billingAddress', JSON.stringify(model.billingAddress));
        model.isChangingBillingAddress(false);
        updateIsReadyToCheckout();
    }

    function setEmail() {
        Cookies.set("email", $("#email").val());
        updateIsReadyToCheckout();
    }

    function setShippingAddress() {
        model.shippingAddress.Name = model.UserName;

        var $button = $("button[onclick*='setShippingAddress']");
        $button.width($button.width());
        $button.html('<i class="fa fa-refresh fa-spin"></i>');
        $button.prop('disabled', true);
        Cookies.set('shippingAddress', JSON.stringify(model.shippingAddress));
        updateModel();
    }

    function setShippingOptionID(shippingOptionID) {
        Cookies.set("shippingOptionID", shippingOptionID);
        updateModel();
    }

    function showErrors(caption, errors) {
        if (errors.constructor == String)
            errors = [errors];

        var html =
            '<div class="alert alert-danger alert-dismissible" role="alert">' +
                '<button type="button" class="close pull-right" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>';
        if (caption)
            html += '<span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"> ' +
                '<strong>' + caption + '</strong><br>';

        html += errors.join('<br>');
        html += '</div>';
        rendering.prepend($(html));

        window.scrollTo(0, 0);
    }

    function updateBillingRegions() {
        if (!model.billingAddress || !model.billingAddress.Country)
            return;

        var country = getCountryElement(model.billingAddress.Country);
        model.activeBillingRegions(model.CountriesRegions[country] || []);
    }

    function updateIsReadyToCheckout() {
        var hasAddress = (model.groupedLines['Ship items'] &&
            model.groupedLines['Ship items'].length &&
            (((JSON.parse(Cookies.get('shippingAddress') || null)) ||
                JSON.parse(Cookies.get('billingAddress') || null)) || model.DefaultAddress != null));
        model.isReadyToCheckout((Cookies.get('email') || model.Cart.Email != null) && hasAddress);
    }

    function updateLineItem(input) {
        var $input = $(input);
        AJAXPost(StorefrontUri('api/storefront/cart/UpdateLineItem'),
            JSON.stringify({ExternalCartLineId: $input.attr('data-ExternalCartLineId'), Quantity: $input.val()}),
            updateModel);
    }

    function updateModel() {
        AJAXPost(StorefrontUri('api/storefront/checkout/UpdateModel'), '', function(newModel) {
            model = newModel;
            if (!model.HasLines)
                location.href = StorefrontUri('ShoppingCart');
            else
                applyModel();
        });
    }

    function updateShippingRegions() {
        if (!model.shippingAddress || !model.shippingAddress.Country)
            return;

        var country = getCountryElement(model.shippingAddress.Country);
        model.activeShippingRegions(model.CountriesRegions[country] || []);
    }

    function useShippingAddress() {
        model.billingAddress = null;
        setBillingAddress();
    }

    function validateAddress(address) {
        var errors = [];

        if (!address.Name)
            errors.push('@Html.Sitecore().Field("Recipient Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!address.Address1)
            errors.push('@Html.Sitecore().Field("Address Line 1 Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!address.City)
            errors.push('@Html.Sitecore().Field("Address City Label", Html.Sitecore().CurrentItem) is a required field.');

        var possibleRegions = model.CountriesRegions[getCountryElement(address.Country)];
        if (!address.Region && possibleRegions && possibleRegions.length)
            errors.push('@Html.Sitecore().Field("Address Province Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!address.ZipPostalCode)
            errors.push('@Html.Sitecore().Field("Address Postal Code Label", Html.Sitecore().CurrentItem) is a required field.');

        if (!address.Country)
            errors.push('@Html.Sitecore().Field("Address Country Label", Html.Sitecore().CurrentItem) is a required field.');

        if (errors.length)
            showErrors("Error Saving Address", errors);

        return !errors.length;
    }

    var model = @Html.Raw(JsonConvert.SerializeObject(Model));
    applyModel();
    if (model.DefaultAddress != null)
        setShippingAddress();

    function setPaymentMethodsSinglePageCheckout() {
        var data = "{";

        var creditCard = {
            "CardToken": model.cardPaymentResultAccessCode,
            "Amount": model.Cart.Total.Amount,
            "CardPaymentAcceptCardPrefix": "paypal"
        };

        if (data.length > 1) {
            data += ",";
        }

        data += '"FederatedPayment":' + JSON.stringify(creditCard);

        if (data.length > 1) {
            data += ",";
        }
        model.PartyID = "0";
		
        model.billingAddress = JSON.parse(Cookies.get('billingAddress') || null);
        if (model.billingAddress == null)
        {
            if (model.shippingAddress == null && model.billingAddress == null) {
                model.billingAddress = model.DefaultAddress;
                model.billingAddress.Name = model.UserName;
            }
            else if (model.shippingAddress != null)
            {
                model.billingAddress = model.shippingAddress;
            }
        }
        else{
            model.billingAddress.PartyID = "1";
            model.billingAddress.ExternalId = model.billingAddress.PartyID;
        }

        data += '"BillingAddress":' + JSON.stringify(model.billingAddress);
        data += "}";

        AJAXPost("/api/storefront/checkout/SetPaymentMethods", data, function (data, success, sender) {
            if (success && data.Success) {
                submitOrderSinglePageCheckout();
            }
        }, $(this));

    }

    // ----- CONFIRM & SUBMIT ----- //
    function submitOrderSinglePageCheckout() {
        var data = "{";
        data += '"userEmail": "' + model.email + '"';
        var creditCard = {
            "CardToken": model.cardPaymentResultAccessCode,
            "Amount": model.Cart.Total.Amount,
            "CardPaymentAcceptCardPrefix": "paypal"
        };

        if (data.length > 1) {
            data += ",";
        }

        data += '"FederatedPayment":' + JSON.stringify(creditCard);
        data += "}";

        AJAXPost("/api/storefront/checkout/SubmitOrder", data, submitOrderResponse, $(this));
    }
</script>